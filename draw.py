# -*- coding: utf-8 -*-
"""Draw.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rQzYewBZBSzb2JSUZtg6V7teGGia0DC8
"""

import matplotlib.pyplot as plt
import numpy as np


input_sizes = np.array([1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 5200, 5300, 5400, 5500, 5600, 5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400, 7500, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 9000, 9100, 9200, 9300, 9400, 9500, 9600, 9700, 9800, 9900, 10000])
actual_runtime = np.array([1782, 1589, 1982, 2286, 2152, 2187, 2322, 2496, 2634, 2830, 2932, 3075, 3237, 3377, 3570, 3737, 3924, 4102, 4190, 4434, 4509, 4603, 5044, 5135, 5687, 5506, 5336, 5888, 5892, 5902, 6099, 6225, 6435, 6478, 6730, 6907, 7023, 7142, 7236, 7651, 7786, 8232, 9472, 9207, 9078, 8922, 9034, 8859, 8868, 9352, 9055, 9662, 9437, 9588, 10135, 10073, 10145, 9853, 9980, 10073, 10202, 10343, 10456, 10600, 10761, 10861, 11071, 11203, 11382, 11538, 11663, 11795, 11872, 12101, 12214, 12420, 12496, 12697, 12833, 13257, 14159, 14066, 15324, 15271, 15063, 14687, 14419, 15194, 14742, 14535, 14659])
# Theoretical complexities
N = 1000
maxIteration = 200
complexity = input_sizes*N*maxIteration # O(N*maxIteration*dim)

# Theoretical complexity (using a secondary y-axis for a different scale)
title_algo = "WOA"
fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.plot(input_sizes, complexity, label='Theoretical Complexity - O(N*MaxIT*dim)', linestyle='--', color='blue')
ax2.plot(input_sizes, actual_runtime, label='Actual Runtime (' + title_algo + ')', marker='o', color='orange')

ax1.set_xlabel('Input size (' + str(input_sizes[0]) + ', ' + str(input_sizes[-1] + 1) + ')' + ', ' + 'step = ' + str(input_sizes[1] - input_sizes[0]) + ', ' + 'total = ' + str(len(input_sizes)))
ax1.set_ylabel('Theoretical Complexity (log scale)', color='blue')
ax2.set_ylabel('Actual Runtime (milliseconds)', color='orange')

plt.title('Theoretical Complexity vs Actual Runtime')
fig.legend(loc="upper left", bbox_to_anchor=(0,1), bbox_transform=ax1.transAxes)
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np


input_sizes = np.array([1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 5200, 5300, 5400, 5500, 5600, 5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400, 7500, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 9000, 9100, 9200, 9300, 9400, 9500, 9600, 9700, 9800, 9900, 10000])
actual_runtime = np.array([2426, 1647, 2006, 2604, 2258, 2249, 2730, 2598, 4285, 2916, 4037, 3120, 4760, 3380, 3699, 4221, 5052, 4754, 5593, 4724, 6664, 5113, 5187, 5250, 5712, 5749, 7979, 5921, 6318, 6674, 5950, 7520, 6295, 6465, 6561, 6637, 6754, 9592, 10408, 12389, 12746, 9182, 9757, 8475, 10834, 8782, 8348, 8229, 8616, 9420, 11370, 9387, 11011, 9755, 12513, 9812, 10325, 10507, 10643, 10316, 14452, 13328, 11585, 12549, 21565, 19725, 12214, 12279, 12837, 14728, 14493, 14906, 20415, 14852, 13816, 13505, 17320, 19517, 20423, 22210, 19552, 19919, 15797, 14133, 14471, 15207, 25424, 17442, 15410, 22213, 15719])
# Theoretical complexities
N = 1000
maxIteration = 100
complexity = input_sizes*N*maxIteration # O(N*maxIteration*dim)

# Theoretical complexity (using a secondary y-axis for a different scale)
title_algo = "DWOA"
fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.plot(input_sizes, complexity, label='Theoretical Complexity - O(N*MaxIT*dim)', linestyle='--', color='blue')
ax2.plot(input_sizes, actual_runtime, label='Actual Runtime (' + title_algo + ')', marker='o', color='orange')

ax1.set_xlabel('Input size (' + str(input_sizes[0]) + ', ' + str(input_sizes[-1] + 1) + ')' + ', ' + 'step = ' + str(input_sizes[1] - input_sizes[0]) + ', ' + 'total = ' + str(len(input_sizes)))
ax1.set_ylabel('Theoretical Complexity (log scale)', color='blue')
ax2.set_ylabel('Actual Runtime (milliseconds)', color='orange')

plt.title('Theoretical Complexity vs Actual Runtime')
fig.legend(loc="upper left", bbox_to_anchor=(0,1), bbox_transform=ax1.transAxes)
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np


input_sizes = np.array([100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000])
actual_runtime = np.array([888, 725, 777, 813, 875, 924, 983, 781, 1105, 1068, 1220, 921, 1086, 1404, 1324, 1426, 1644, 1641, 1749, 1818, 1915, 1925, 1626, 2055, 2110, 2101, 2255, 2304, 2091, 2413, 2451, 2491, 2585, 2616, 2731, 2761, 2889, 3093, 3479, 3332, 3191, 3507, 3168, 3607, 3544, 3541, 4031, 4318, 4114, 3297, 3081, 4049, 4474, 4097, 4356, 3992, 4190, 3456, 4642, 4395, 4368, 4343, 4404, 4551, 4610, 4724, 3598, 4926, 5036, 4730, 5178, 5229, 5467, 5947, 4769, 5822, 4332, 4266, 6075, 6863, 4538, 6089, 5948, 5912, 6171, 6061, 6005, 6178, 6332, 6748, 6639])
# Theoretical complexities
N = 1000
maxIteration = 300
complexity = input_sizes*N*maxIteration # O(N*maxIteration*dim)

# Theoretical complexity (using a secondary y-axis for a different scale)
title_algo = "DWOA 0-1 Knapsack"
fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.plot(input_sizes, complexity, label='Theoretical Complexity - O(N*MaxIT*dim)', linestyle='--', color='blue')
ax2.plot(input_sizes, actual_runtime, label='Actual Runtime (' + title_algo + ')', marker='o', color='orange')

ax1.set_xlabel('Input size (' + str(input_sizes[0]) + ', ' + str(input_sizes[-1] + 1) + ')' + ', ' + 'step = ' + str(input_sizes[1] - input_sizes[0]) + ', ' + 'total = ' + str(len(input_sizes)))
ax1.set_ylabel('Theoretical Complexity (log scale)', color='blue')
ax2.set_ylabel('Actual Runtime (milliseconds)', color='orange')

plt.title('Theoretical Complexity vs Actual Runtime')
fig.legend(loc="upper left", bbox_to_anchor=(0,1), bbox_transform=ax1.transAxes)
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np


input_sizes = np.array([10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300])
actual_runtime = np.array([491, 621, 709, 819, 1005, 1171, 1352, 1719, 1920, 2260, 2726, 3476, 4005, 4716, 5460, 5316, 5591, 6044, 5992, 6312, 6897, 8090, 8688, 8889, 9508, 9929, 10369, 11030, 10963, 11825, 12176, 12310, 12720, 14146, 14575, 14694, 14697, 15495, 16266, 18597, 17395, 18335, 17374, 17146, 21358, 21857, 22008, 23299, 23159, 20433, 25173, 28459, 35093, 27490, 24696, 29517, 32822, 34006, 26612])
# Theoretical complexities
N = 1000
maxIteration = 500
complexity = input_sizes*N*maxIteration # O(N*maxIteration*dim)

# Theoretical complexity (using a secondary y-axis for a different scale)
title_algo = "DWOA Discounted 0-1 Knapsack"
fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.plot(input_sizes, complexity, label='Theoretical Complexity - O(N*MaxIT*dim)', linestyle='--', color='blue')
ax2.plot(input_sizes, actual_runtime, label='Actual Runtime (' + title_algo + ')', marker='o', color='orange')

ax1.set_xlabel('Input size (' + str(input_sizes[0]) + ', ' + str(input_sizes[-1] + 1) + ')' + ', ' + 'step = ' + str(input_sizes[1] - input_sizes[0]) + ', ' + 'total = ' + str(len(input_sizes)))
ax1.set_ylabel('Theoretical Complexity (log scale)', color='blue')
ax2.set_ylabel('Actual Runtime (milliseconds)', color='orange')

plt.title('Theoretical Complexity vs Actual Runtime')
fig.legend(loc="upper left", bbox_to_anchor=(0,1), bbox_transform=ax1.transAxes)
plt.grid(True)
plt.show()